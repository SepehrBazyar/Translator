Class as decorator in python
Last Updated : 19 Apr, 2020
Decorators are a very powerful and useful tool in Python since it allows programmers to modify the behaviour of function or class. Decorators allow us to wrap another function in order to extend the behaviour of the wrapped function, without permanently modifying it.
We can define a decorator as a class in order to do that, we have to use a __call__ method of classes. When a user needs to create an object that acts as a function then function decorator needs to return an object that acts like a function, so __call__ can be useful. In order to use class decorator with argument *args and **kwargs we used a __call__ function and passed both the argument in a given function. In the given example the functions did not return anything so there is not any issue, but one may need the returned value. So we use return statement with the class decorator. This type of class decorator is most frequently used. This decorator checks parameters before executing the function preventing the function to. become overloaded and enables it to store only logical and necessary statements.
